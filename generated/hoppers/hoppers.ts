// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LevelUp extends ethereum.Event {
  get params(): LevelUp__Params {
    return new LevelUp__Params(this);
  }
}

export class LevelUp__Params {
  _event: LevelUp;

  constructor(event: LevelUp) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NameChange extends ethereum.Event {
  get params(): NameChange__Params {
    return new NameChange__Params(this);
  }
}

export class NameChange__Params {
  _event: NameChange;

  constructor(event: NameChange) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Rebirth extends ethereum.Event {
  get params(): Rebirth__Params {
    return new Rebirth__Params(this);
  }
}

export class Rebirth__Params {
  _event: Rebirth;

  constructor(event: Rebirth) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnlabeledData extends ethereum.Event {
  get params(): UnlabeledData__Params {
    return new UnlabeledData__Params(this);
  }
}

export class UnlabeledData__Params {
  _event: UnlabeledData;

  constructor(event: UnlabeledData) {
    this._event = event;
  }

  get key(): string {
    return this._event.parameters[0].value.toString();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedNameFee extends ethereum.Event {
  get params(): UpdatedNameFee__Params {
    return new UpdatedNameFee__Params(this);
  }
}

export class UpdatedNameFee__Params {
  _event: UpdatedNameFee;

  constructor(event: UpdatedNameFee) {
    this._event = event;
  }

  get namefee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class hoppers__getHopperResultValue0Struct extends ethereum.Tuple {
  get level(): BigInt {
    return this[0].toBigInt();
  }

  get rebirths(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get agility(): i32 {
    return this[3].toI32();
  }

  get vitality(): i32 {
    return this[4].toI32();
  }

  get intelligence(): i32 {
    return this[5].toI32();
  }

  get fertility(): i32 {
    return this[6].toI32();
  }
}

export class hoppers__getHopperWithDataResultHopperStruct extends ethereum.Tuple {
  get level(): BigInt {
    return this[0].toBigInt();
  }

  get rebirths(): i32 {
    return this[1].toI32();
  }

  get strength(): i32 {
    return this[2].toI32();
  }

  get agility(): i32 {
    return this[3].toI32();
  }

  get vitality(): i32 {
    return this[4].toI32();
  }

  get intelligence(): i32 {
    return this[5].toI32();
  }

  get fertility(): i32 {
    return this[6].toI32();
  }
}

export class hoppers__getHopperWithDataResult {
  value0: hoppers__getHopperWithDataResultHopperStruct;
  value1: Array<Bytes>;

  constructor(
    value0: hoppers__getHopperWithDataResultHopperStruct,
    value1: Array<Bytes>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    return map;
  }
}

export class hoppers__hoppersResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }
}

export class hoppers extends ethereum.SmartContract {
  static bind(address: Address): hoppers {
    return new hoppers("hoppers", address);
  }

  LEGENDARY_ID_START(): BigInt {
    let result = super.call(
      "LEGENDARY_ID_START",
      "LEGENDARY_ID_START():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LEGENDARY_ID_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LEGENDARY_ID_START",
      "LEGENDARY_ID_START():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PER_ADDRESS(): BigInt {
    let result = super.call(
      "MAX_PER_ADDRESS",
      "MAX_PER_ADDRESS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PER_ADDRESS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PER_ADDRESS",
      "MAX_PER_ADDRESS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINT_COST(): BigInt {
    let result = super.call("MINT_COST", "MINT_COST():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINT_COST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MINT_COST", "MINT_COST():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WL_MINT_COST(): BigInt {
    let result = super.call("WL_MINT_COST", "WL_MINT_COST():(uint256)", []);

    return result[0].toBigInt();
  }

  try_WL_MINT_COST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("WL_MINT_COST", "WL_MINT_COST():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _jsonString(tokenId: BigInt): string {
    let result = super.call("_jsonString", "_jsonString(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try__jsonString(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("_jsonString", "_jsonString(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  changeHopperName(tokenId: BigInt, _newName: string): BigInt {
    let result = super.call(
      "changeHopperName",
      "changeHopperName(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(_newName)
      ]
    );

    return result[0].toBigInt();
  }

  try_changeHopperName(
    tokenId: BigInt,
    _newName: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "changeHopperName",
      "changeHopperName(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(_newName)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  freeMerkleRoot(): Bytes {
    let result = super.call("freeMerkleRoot", "freeMerkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_freeMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "freeMerkleRoot",
      "freeMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  freeRedeemed(param0: Address): BigInt {
    let result = super.call("freeRedeemed", "freeRedeemed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_freeRedeemed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "freeRedeemed",
      "freeRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(param0: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getData(_key: string, _tokenId: BigInt): Bytes {
    let result = super.call("getData", "getData(string,uint256):(bytes32)", [
      ethereum.Value.fromString(_key),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBytes();
  }

  try_getData(_key: string, _tokenId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getData", "getData(string,uint256):(bytes32)", [
      ethereum.Value.fromString(_key),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getGlobalData(_key: string): Bytes {
    let result = super.call(
      "getGlobalData",
      "getGlobalData(string):(bytes32)",
      [ethereum.Value.fromString(_key)]
    );

    return result[0].toBytes();
  }

  try_getGlobalData(_key: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getGlobalData",
      "getGlobalData(string):(bytes32)",
      [ethereum.Value.fromString(_key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getHopper(tokenId: BigInt): hoppers__getHopperResultValue0Struct {
    let result = super.call(
      "getHopper",
      "getHopper(uint256):((uint200,uint16,uint8,uint8,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<hoppers__getHopperResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHopper(
    tokenId: BigInt
  ): ethereum.CallResult<hoppers__getHopperResultValue0Struct> {
    let result = super.tryCall(
      "getHopper",
      "getHopper(uint256):((uint200,uint16,uint8,uint8,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<hoppers__getHopperResultValue0Struct>(value[0].toTuple())
    );
  }

  getHopperName(tokenId: BigInt): string {
    let result = super.call(
      "getHopperName",
      "getHopperName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toString();
  }

  try_getHopperName(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getHopperName",
      "getHopperName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getHopperWithData(
    _keys: Array<string>,
    _tokenId: BigInt
  ): hoppers__getHopperWithDataResult {
    let result = super.call(
      "getHopperWithData",
      "getHopperWithData(string[],uint256):((uint200,uint16,uint8,uint8,uint8,uint8,uint8),bytes32[])",
      [
        ethereum.Value.fromStringArray(_keys),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return changetype<hoppers__getHopperWithDataResult>(
      new hoppers__getHopperWithDataResult(
        changetype<hoppers__getHopperWithDataResultHopperStruct>(
          result[0].toTuple()
        ),
        result[1].toBytesArray()
      )
    );
  }

  try_getHopperWithData(
    _keys: Array<string>,
    _tokenId: BigInt
  ): ethereum.CallResult<hoppers__getHopperWithDataResult> {
    let result = super.tryCall(
      "getHopperWithData",
      "getHopperWithData(string[],uint256):((uint200,uint16,uint8,uint8,uint8,uint8,uint8),bytes32[])",
      [
        ethereum.Value.fromStringArray(_keys),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<hoppers__getHopperWithDataResult>(
        new hoppers__getHopperWithDataResult(
          changetype<hoppers__getHopperWithDataResultHopperStruct>(
            value[0].toTuple()
          ),
          value[1].toBytesArray()
        )
      )
    );
  }

  hopperMaxAttributeValue(): BigInt {
    let result = super.call(
      "hopperMaxAttributeValue",
      "hopperMaxAttributeValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_hopperMaxAttributeValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hopperMaxAttributeValue",
      "hopperMaxAttributeValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hoppers(param0: BigInt): hoppers__hoppersResult {
    let result = super.call(
      "hoppers",
      "hoppers(uint256):(uint200,uint16,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new hoppers__hoppersResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32()
    );
  }

  try_hoppers(param0: BigInt): ethereum.CallResult<hoppers__hoppersResult> {
    let result = super.tryCall(
      "hoppers",
      "hoppers(uint256):(uint200,uint16,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new hoppers__hoppersResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32()
      )
    );
  }

  hoppersLength(): BigInt {
    let result = super.call("hoppersLength", "hoppersLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_hoppersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hoppersLength",
      "hoppersLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hoppersNames(param0: BigInt): string {
    let result = super.call("hoppersNames", "hoppersNames(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_hoppersNames(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "hoppersNames",
      "hoppersNames(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  imageURL(): string {
    let result = super.call("imageURL", "imageURL():(string)", []);

    return result[0].toString();
  }

  try_imageURL(): ethereum.CallResult<string> {
    let result = super.tryCall("imageURL", "imageURL():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  indexer(param0: BigInt): BigInt {
    let result = super.call("indexer", "indexer(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_indexer(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexer", "indexer(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameFee(): BigInt {
    let result = super.call("nameFee", "nameFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nameFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nameFee", "nameFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(param0: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  preSaleOpenTime(): BigInt {
    let result = super.call(
      "preSaleOpenTime",
      "preSaleOpenTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_preSaleOpenTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preSaleOpenTime",
      "preSaleOpenTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserved(): BigInt {
    let result = super.call("reserved", "reserved():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserved(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserved", "reserved():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  takenNames(param0: Bytes): boolean {
    let result = super.call("takenNames", "takenNames(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_takenNames(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("takenNames", "takenNames(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  unlabeledData(param0: string, param1: BigInt): Bytes {
    let result = super.call(
      "unlabeledData",
      "unlabeledData(string,uint256):(bytes32)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_unlabeledData(
    param0: string,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "unlabeledData",
      "unlabeledData(string,uint256):(bytes32)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  unlabeledGlobalData(param0: string): Bytes {
    let result = super.call(
      "unlabeledGlobalData",
      "unlabeledGlobalData(string):(bytes32)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBytes();
  }

  try_unlabeledGlobalData(param0: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "unlabeledGlobalData",
      "unlabeledGlobalData(string):(bytes32)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  wlMerkleRoot(): Bytes {
    let result = super.call("wlMerkleRoot", "wlMerkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_wlMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("wlMerkleRoot", "wlMerkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  wlRedeemed(param0: Address): BigInt {
    let result = super.call("wlRedeemed", "wlRedeemed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_wlRedeemed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wlRedeemed", "wlRedeemed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  zones(param0: Address): boolean {
    let result = super.call("zones", "zones(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_zones(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("zones", "zones(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _NFT_NAME(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _NFT_SYMBOL(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _NAME_FEE(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddZonesCall extends ethereum.Call {
  get inputs(): AddZonesCall__Inputs {
    return new AddZonesCall__Inputs(this);
  }

  get outputs(): AddZonesCall__Outputs {
    return new AddZonesCall__Outputs(this);
  }
}

export class AddZonesCall__Inputs {
  _call: AddZonesCall;

  constructor(call: AddZonesCall) {
    this._call = call;
  }

  get _zones(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddZonesCall__Outputs {
  _call: AddZonesCall;

  constructor(call: AddZonesCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeHopperNameCall extends ethereum.Call {
  get inputs(): ChangeHopperNameCall__Inputs {
    return new ChangeHopperNameCall__Inputs(this);
  }

  get outputs(): ChangeHopperNameCall__Outputs {
    return new ChangeHopperNameCall__Outputs(this);
  }
}

export class ChangeHopperNameCall__Inputs {
  _call: ChangeHopperNameCall;

  constructor(call: ChangeHopperNameCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeHopperNameCall__Outputs {
  _call: ChangeHopperNameCall;

  constructor(call: ChangeHopperNameCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FreeMintCall extends ethereum.Call {
  get inputs(): FreeMintCall__Inputs {
    return new FreeMintCall__Inputs(this);
  }

  get outputs(): FreeMintCall__Outputs {
    return new FreeMintCall__Outputs(this);
  }
}

export class FreeMintCall__Inputs {
  _call: FreeMintCall;

  constructor(call: FreeMintCall) {
    this._call = call;
  }

  get numberOfMints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get totalGiven(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class FreeMintCall__Outputs {
  _call: FreeMintCall;

  constructor(call: FreeMintCall) {
    this._call = call;
  }
}

export class LevelUpCall extends ethereum.Call {
  get inputs(): LevelUpCall__Inputs {
    return new LevelUpCall__Inputs(this);
  }

  get outputs(): LevelUpCall__Outputs {
    return new LevelUpCall__Outputs(this);
  }
}

export class LevelUpCall__Inputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LevelUpCall__Outputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }
}

export class NormalMintCall extends ethereum.Call {
  get inputs(): NormalMintCall__Inputs {
    return new NormalMintCall__Inputs(this);
  }

  get outputs(): NormalMintCall__Outputs {
    return new NormalMintCall__Outputs(this);
  }
}

export class NormalMintCall__Inputs {
  _call: NormalMintCall;

  constructor(call: NormalMintCall) {
    this._call = call;
  }

  get numberOfMints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NormalMintCall__Outputs {
  _call: NormalMintCall;

  constructor(call: NormalMintCall) {
    this._call = call;
  }
}

export class RebirthCall extends ethereum.Call {
  get inputs(): RebirthCall__Inputs {
    return new RebirthCall__Inputs(this);
  }

  get outputs(): RebirthCall__Outputs {
    return new RebirthCall__Outputs(this);
  }
}

export class RebirthCall__Inputs {
  _call: RebirthCall;

  constructor(call: RebirthCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RebirthCall__Outputs {
  _call: RebirthCall;

  constructor(call: RebirthCall) {
    this._call = call;
  }
}

export class RemoveZoneCall extends ethereum.Call {
  get inputs(): RemoveZoneCall__Inputs {
    return new RemoveZoneCall__Inputs(this);
  }

  get outputs(): RemoveZoneCall__Outputs {
    return new RemoveZoneCall__Outputs(this);
  }
}

export class RemoveZoneCall__Inputs {
  _call: RemoveZoneCall;

  constructor(call: RemoveZoneCall) {
    this._call = call;
  }

  get _zone(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveZoneCall__Outputs {
  _call: RemoveZoneCall;

  constructor(call: RemoveZoneCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetDataCall extends ethereum.Call {
  get inputs(): SetDataCall__Inputs {
    return new SetDataCall__Inputs(this);
  }

  get outputs(): SetDataCall__Outputs {
    return new SetDataCall__Outputs(this);
  }
}

export class SetDataCall__Inputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }

  get _key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetDataCall__Outputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }
}

export class SetGlobalDataCall extends ethereum.Call {
  get inputs(): SetGlobalDataCall__Inputs {
    return new SetGlobalDataCall__Inputs(this);
  }

  get outputs(): SetGlobalDataCall__Outputs {
    return new SetGlobalDataCall__Outputs(this);
  }
}

export class SetGlobalDataCall__Inputs {
  _call: SetGlobalDataCall;

  constructor(call: SetGlobalDataCall) {
    this._call = call;
  }

  get _key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetGlobalDataCall__Outputs {
  _call: SetGlobalDataCall;

  constructor(call: SetGlobalDataCall) {
    this._call = call;
  }
}

export class SetHopperMaxAttributeValueCall extends ethereum.Call {
  get inputs(): SetHopperMaxAttributeValueCall__Inputs {
    return new SetHopperMaxAttributeValueCall__Inputs(this);
  }

  get outputs(): SetHopperMaxAttributeValueCall__Outputs {
    return new SetHopperMaxAttributeValueCall__Outputs(this);
  }
}

export class SetHopperMaxAttributeValueCall__Inputs {
  _call: SetHopperMaxAttributeValueCall;

  constructor(call: SetHopperMaxAttributeValueCall) {
    this._call = call;
  }

  get _hopperMaxAttributeValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHopperMaxAttributeValueCall__Outputs {
  _call: SetHopperMaxAttributeValueCall;

  constructor(call: SetHopperMaxAttributeValueCall) {
    this._call = call;
  }
}

export class SetImageURLCall extends ethereum.Call {
  get inputs(): SetImageURLCall__Inputs {
    return new SetImageURLCall__Inputs(this);
  }

  get outputs(): SetImageURLCall__Outputs {
    return new SetImageURLCall__Outputs(this);
  }
}

export class SetImageURLCall__Inputs {
  _call: SetImageURLCall;

  constructor(call: SetImageURLCall) {
    this._call = call;
  }

  get _imageURL(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetImageURLCall__Outputs {
  _call: SetImageURLCall;

  constructor(call: SetImageURLCall) {
    this._call = call;
  }
}

export class SetNameChangeFeeCall extends ethereum.Call {
  get inputs(): SetNameChangeFeeCall__Inputs {
    return new SetNameChangeFeeCall__Inputs(this);
  }

  get outputs(): SetNameChangeFeeCall__Outputs {
    return new SetNameChangeFeeCall__Outputs(this);
  }
}

export class SetNameChangeFeeCall__Inputs {
  _call: SetNameChangeFeeCall;

  constructor(call: SetNameChangeFeeCall) {
    this._call = call;
  }

  get _nameFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNameChangeFeeCall__Outputs {
  _call: SetNameChangeFeeCall;

  constructor(call: SetNameChangeFeeCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetSaleDetailsCall extends ethereum.Call {
  get inputs(): SetSaleDetailsCall__Inputs {
    return new SetSaleDetailsCall__Inputs(this);
  }

  get outputs(): SetSaleDetailsCall__Outputs {
    return new SetSaleDetailsCall__Outputs(this);
  }
}

export class SetSaleDetailsCall__Inputs {
  _call: SetSaleDetailsCall;

  constructor(call: SetSaleDetailsCall) {
    this._call = call;
  }

  get _preSaleOpenTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wlMerkleRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _freeMerkleRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _reserved(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetSaleDetailsCall__Outputs {
  _call: SetSaleDetailsCall;

  constructor(call: SetSaleDetailsCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnsetDataCall extends ethereum.Call {
  get inputs(): UnsetDataCall__Inputs {
    return new UnsetDataCall__Inputs(this);
  }

  get outputs(): UnsetDataCall__Outputs {
    return new UnsetDataCall__Outputs(this);
  }
}

export class UnsetDataCall__Inputs {
  _call: UnsetDataCall;

  constructor(call: UnsetDataCall) {
    this._call = call;
  }

  get _key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnsetDataCall__Outputs {
  _call: UnsetDataCall;

  constructor(call: UnsetDataCall) {
    this._call = call;
  }
}

export class UnsetGlobalDataCall extends ethereum.Call {
  get inputs(): UnsetGlobalDataCall__Inputs {
    return new UnsetGlobalDataCall__Inputs(this);
  }

  get outputs(): UnsetGlobalDataCall__Outputs {
    return new UnsetGlobalDataCall__Outputs(this);
  }
}

export class UnsetGlobalDataCall__Inputs {
  _call: UnsetGlobalDataCall;

  constructor(call: UnsetGlobalDataCall) {
    this._call = call;
  }

  get _key(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UnsetGlobalDataCall__Outputs {
  _call: UnsetGlobalDataCall;

  constructor(call: UnsetGlobalDataCall) {
    this._call = call;
  }
}

export class WhitelistMintCall extends ethereum.Call {
  get inputs(): WhitelistMintCall__Inputs {
    return new WhitelistMintCall__Inputs(this);
  }

  get outputs(): WhitelistMintCall__Outputs {
    return new WhitelistMintCall__Outputs(this);
  }
}

export class WhitelistMintCall__Inputs {
  _call: WhitelistMintCall;

  constructor(call: WhitelistMintCall) {
    this._call = call;
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class WhitelistMintCall__Outputs {
  _call: WhitelistMintCall;

  constructor(call: WhitelistMintCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
